, panel = function(...){
panel.histogram(...)
panel.abline(v = perm$t0, col = 2, lwd = 2)
})
)
}
test <- subset(conserved_peak_data, padj < 0.05 & class == "trans")[,c("log2FoldChange", "PmPs.lfc")]
spear.cor(test)
?histogram
library(lattice)
spear.cor(test)
## function: bivariate Spearman rank correlation test for independence
spear.cor <- function(z) {
rho.est <- function(x, i) { # Test statistic
x <- as.numeric(z$log2FoldChange)
y <- as.numeric(z$PmPs.lfc)
return(cor.test(x, y, method = "spearman", exact = FALSE)$estimate)
}
perm <- boot(data = z # 10000 permutation samples
, statistic = rho.est
, sim = "permutation"
, R = 10000)
p <- with(perm, mean( c(t, t0) >= t0 )) # p-value
return(
histogram(with(perm, c(t, t0)) # Histogram
, type = "density"
, col = "#0080ff"
, xlab = "Replicates correlation"
, ylab = list(rot = 0)
, main = paste(
"Permutation distribution of the bivariate Spearman",
"rank correlation test")
, sub = list(substitute(paste(hat(p), " = ",pvalue)
, list(pvalue = p))
, col = 2)
, panel = function(...){
panel.histogram(...)
panel.abline(v = perm$t0, col = 2, lwd = 2)
})
)
}
test <- subset(conserved_peak_data, padj < 0.05 & class == "trans")[,c("log2FoldChange", "PmPs.lfc")]
spear.cor(test)
## function: bivariate Spearman rank correlation test for independence
spear.cor <- function(z) {
rho.est <- function(x, i) { # Test statistic
x <- as.numeric(z$log2FoldChange)
y <- as.numeric(z$PmPs.lfc)
return(cor.test(x, y, method = "spearman", exact = FALSE)$estimate)
}
perm <- boot(data = z # 10000 permutation samples
, statistic = rho.est
, sim = "permutation"
, R = 10000)
p <- with(perm, mean( c(t, t0) >= t0 )) # p-value
return(perm
)
}
test <- subset(conserved_peak_data, padj < 0.05 & class == "trans")[,c("log2FoldChange", "PmPs.lfc")]
spear.cor(test)
return(summary(perm)
)
## function: bivariate Spearman rank correlation test for independence
spear.cor <- function(z) {
rho.est <- function(x, i) { # Test statistic
x <- as.numeric(z$log2FoldChange)
y <- as.numeric(z$PmPs.lfc)
return(cor.test(x, y, method = "spearman", exact = FALSE)$estimate)
}
perm <- boot(data = z # 10000 permutation samples
, statistic = rho.est
, sim = "permutation"
, R = 10000)
p <- with(perm, mean( c(t, t0) >= t0 )) # p-value
return(summary(perm)
)
}
test <- subset(conserved_peak_data, padj < 0.05 & class == "trans")[,c("log2FoldChange", "PmPs.lfc")]
spear.cor(test)
reg.DADE.P <- lapply( list("conserved", "cis", "trans", "cis.plus.trans", "compensatory", "ambiguous"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & class == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & class == x)$PmPs.lfc, method = "spearman")
}
)
reg.DADE.P
reg.DADE.P[[1]]
summary(reg.DADE.P[[1]])
reg.DADE.P[[1]]$statistic
reg.DADE.P[[1]]$estimate
reg.DADE.P[[1]]$p
reg.DADE.P[[1]]$p.value
reg.DADE.P <- lapply( list("conserved", "cis", "trans", "cis.plus.trans", "compensatory", "ambiguous"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & class == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & class == x)$PmPs.lfc, method = "spearman")
}
)
reg.DADE.F1 <- lapply( list("conserved", "cis", "trans", "cis.plus.trans", "compensatory", "ambiguous"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & class == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & class == x)$F1mF1s.lfc, method = "spearman")
}
)
sapply(reg.DADE.P, i$estimate)
sapply(reg.DADE.P, x$estimate)
sapply(reg.DADE.P, function(x) x$estimate)
reg.DADE.P.rho <- sapply(reg.DADE.P, function(x) x$estimate)
reg.DADE.F1.rho <- sapply(reg.DADE.P, function(x) x$estimate)
reg.DADE.P.rho <- sapply(reg.DADE.P, function(x) x$estimate)
reg.DADE.F1.rho <- sapply(reg.DADE.P, function(x) x$estimate)
reg.DADE.P.p <- sapply(reg.DADE.P, function(x)  x$p.value)
reg.DADE.F1.p <- sapply(reg.DADE.P, function(x) x$p.value)
reg.DADE.P.rho
reg.DADE.P.rho <- sapply(reg.DADE.P, function(x)  round(x$estimate, 3))
reg.DADE.F1.rho <- sapply(reg.DADE.P, function(x) round(x$estimate, 3))
reg.DADE.P.rho
reg.DADE.P.p
reg.DADE.P.p <- sapply(reg.DADE.P, function(x)  round(x$p.value), 3)
reg.DADE.P.p <- sapply(reg.DADE.P, function(x)  round(x$p.value, 3)
reg.DADE.P.p <- sapply(reg.DADE.P, function(x)  round(x$p.value, 3))
reg.DADE.P.p <- sapply(reg.DADE.P, function(x)  round(x$p.value, 3))
reg.DADE.F1.p <- sapply(reg.DADE.P, function(x) round(x$p.value, 3))
reg.DADE.P.p
reg.DADE.F1.p
rbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p)
reg.samplesize <- lapply(list("conserved", "cis", "trans", "cis.plus.trans", "compensatory", "ambiguous"),
function(x) {dim(subset(conserved_peak_data, padj < 0.05 & class == x))[1]
}
)
rbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p)
rbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p) %>% setNames()
rbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p) %>% setNames(c("conserved", "cis", "trans", "cis.plus.trans", "compensatory", "ambiguous"))
data.frame(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p) %>% setNames(c("conserved", "cis", "trans", "cis.plus.trans", "compensatory", "ambiguous"))
data.frame(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p)
as.data.frame(rbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p)) %>% setNames(c("conserved", "cis", "trans", "cis.plus.trans", "compensatory", "ambiguous"))
as.data.frame(cbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
reg.DADE.P.p <- sapply(reg.DADE.F1, function(x)  round(x$p.value, 3))
reg.DADE.F1.p <- sapply(reg.DADE.F1, function(x) round(x$p.value, 3))
as.data.frame(cbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
reg.DADE.P.rho <- sapply(reg.DADE.P, function(x)  round(x$estimate, 3))
reg.DADE.F1.rho <- sapply(reg.DADE.F1, function(x) round(x$estimate, 3))
reg.DADE.P.p <- sapply(reg.DADE.P, function(x)  round(x$p.value, 3))
reg.DADE.F1.p <- sapply(reg.DADE.F1, function(x) round(x$p.value, 3))
as.data.frame(cbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
dom.samplesize <- lapply(list("conserved", "additive", "mel.dominant", "sim.dominant", "overdominant", "underdominant"),
function(x) {dim(subset(conserved_peak_data, padj < 0.05 & dominance == x))[1]
}
)
dom.samplesize
dom.samplesize <- lapply(list("conserved", "additive", "mel.dominant", "sim.dominant", "overdominant", "underdominant"),
function(x) {dim(subset(conserved_peak_data, padj < 0.05 & dominance == x))[1]
}
)
dom.DADE.P <- lapply( list("conserved", "cis", "trans", "cis.plus.trans", "compensatory", "ambiguous"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & dominance == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & dominance == x)$PmPs.lfc, method = "spearman")
}
)
dom.DADE.F1 <- lapply( list("conserved", "cis", "trans", "cis.plus.trans", "compensatory", "ambiguous"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & dominance == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & dominance == x)$F1mF1s.lfc, method = "spearman")
}
)
dom.DADE.P <- lapply( list("conserved", "additive", "mel.dominant", "sim.dominant", "overdominant", "underdominant"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & dominance == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & dominance == x)$PmPs.lfc, method = "spearman")
}
)
dom.DADE.F1 <- lapply( list("conserved", "additive", "mel.dominant", "sim.dominant", "overdominant", "underdominant"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & dominance == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & dominance == x)$F1mF1s.lfc, method = "spearman")
}
)
dom.DADE.P.rho <-  sapply(dom.DADE.P, function(x)  round(x$estimate, 3))
dom.DADE.F1.rho <- sapply(dom.DADE.F1, function(x) round(x$estimate, 3))
dom.DADE.P.p <-  sapply(dom.DADE.P, function(x)  round(x$p.value, 3))
dom.DADE.F1.p <- sapply(dom.DADE.F1, function(x) round(x$p.value, 3))
as.data.frame(cbind(dom.samplesize,
dom.DADE.P.rho,
dom.DADE.P.p,
dom.DADE.F1.rho,
dom.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
dom.DADE.P <- lapply( list("conserved", "additive", "mel.dominant", "sim.dominant"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & dominance == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & dominance == x)$PmPs.lfc, method = "spearman")
}
)
dom.DADE.F1 <- lapply( list("conserved", "additive", "mel.dominant", "sim.dominant"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & dominance == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & dominance == x)$F1mF1s.lfc, method = "spearman")
}
)
dom.DADE.P.rho <-  sapply(dom.DADE.P, function(x)  round(x$estimate, 3))
dom.DADE.F1.rho <- sapply(dom.DADE.F1, function(x) round(x$estimate, 3))
dom.DADE.P.p <-  sapply(dom.DADE.P, function(x)  round(x$p.value, 3))
dom.DADE.F1.p <- sapply(dom.DADE.F1, function(x) round(x$p.value, 3))
as.data.frame(cbind(dom.samplesize,
dom.DADE.P.rho,
dom.DADE.P.p,
dom.DADE.F1.rho,
dom.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
dom.samplesize <- lapply(list("conserved", "additive", "mel.dominant", "sim.dominant"),
function(x) {dim(subset(conserved_peak_data, padj < 0.05 & dominance == x))[1]
}
)
dom.DADE.P <- lapply( list("conserved", "additive", "mel.dominant", "sim.dominant"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & dominance == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & dominance == x)$PmPs.lfc, method = "spearman")
}
)
dom.DADE.F1 <- lapply( list("conserved", "additive", "mel.dominant", "sim.dominant"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & dominance == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & dominance == x)$F1mF1s.lfc, method = "spearman")
}
)
dom.DADE.P.rho <-  sapply(dom.DADE.P, function(x)  round(x$estimate, 3))
dom.DADE.F1.rho <- sapply(dom.DADE.F1, function(x) round(x$estimate, 3))
dom.DADE.P.p <-  sapply(dom.DADE.P, function(x)  round(x$p.value, 3))
dom.DADE.F1.p <- sapply(dom.DADE.F1, function(x) round(x$p.value, 3))
as.data.frame(cbind(dom.samplesize,
dom.DADE.P.rho,
dom.DADE.P.p,
dom.DADE.F1.rho,
dom.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
conserved_peak_data %>% mutate(F1tPmPs = log2(abs(avg_A_hyb / PmPs.avg)))
conserved_peak_data %>% mutate(F1tPmPs = log2(abs(avg_A_hyb / PmPs.avg) + 1))
conserved_peak_data %>% mutate(F1tPmPs = avg_A_hyb / PmPs.avg)
conserved_peak_data %>% mutate(F1tPmPs = 1 - (avg_A_hyb / PmPs.avg))
conserved_peak_data %<>% mutate(F1tPmPs = 1 - (avg_A_hyb / PmPs.avg))
conserved_peak_data %<>% mutate(F1tPmPs = (F1tPm.lfc + F1tPs.lfc) / 2)
lapply( list("overdominant", "underdominant"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & dominance == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & dominance == x)$F1tPmPs, method = "spearman")
}
)
as.data.frame(cbind(dom.samplesize,
dom.DADE.P.rho,
dom.DADE.P.p,
dom.DADE.F1.rho,
dom.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
as.data.frame(cbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
reg.samplesize <- lapply(list("conserved", "cis", "trans", "cis.plus.trans"),
function(x) {dim(subset(conserved_peak_data, padj < 0.05 & class == x))[1]
}
)
reg.DADE.P <- lapply( list("conserved", "cis", "trans", "cis.plus.trans"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & class == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & class == x)$PmPs.lfc, method = "spearman")
}
)
reg.DADE.F1 <- lapply( list("conserved", "cis", "trans", "cis.plus.trans"),
function(x) {cor.test(subset(conserved_peak_data, padj < 0.05 & class == x)$log2FoldChange,
subset(conserved_peak_data, padj < 0.05 & class == x)$F1mF1s.lfc, method = "spearman")
}
)
reg.DADE.P.rho <- sapply(reg.DADE.P, function(x)  round(x$estimate, 3))
reg.DADE.F1.rho <- sapply(reg.DADE.F1, function(x) round(x$estimate, 3))
reg.DADE.P.p <- sapply(reg.DADE.P, function(x)  round(x$p.value, 3))
reg.DADE.F1.p <- sapply(reg.DADE.F1, function(x) round(x$p.value, 3))
as.data.frame(cbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
as.data.frame(cbind(dom.samplesize,
dom.DADE.P.rho,
dom.DADE.P.p,
dom.DADE.F1.rho,
dom.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
as.data.frame(cbind(reg.samplesize,
reg.DADE.P.rho,
reg.DADE.P.p,
reg.DADE.F1.rho,
reg.DADE.F1.p)) %>% setNames(c("n", "P rho", "P p", "F1 rho", "F1 p"))
?cor.test
View(GY94)
dN.Parent <- ggplot(subset(GY94, sfp == "sfp"),
aes(x = abs(PmPs.lfc), y = dN)) +
geom_hex(bins = 120) +
scale_fill_continuous(type = "viridis") +
theme_minimal() +
xlab("log fold-change parental divergence") +
ylim(c(0,1)) +
annotate(geom = "text", y = 0.75, x = 6,
label = expression(rho==-0.016),
size = 4, hjust = 0)
dN.Parent
dN.Parent
### subset corrs to Sfp and AG-biased
dN.Parent <- ggplot(subset(GY94, sfp == "sfp"),
aes(x = abs(PmPs.lfc), y = dN)) +
geom_point(alpha = 0.8) +
theme_minimal() +
xlab("log fold-change parental divergence") +
ylim(c(0,1)) +
annotate(geom = "text", y = 0.75, x = 6,
label = expression(rho==-0.016),
size = 4, hjust = 0)
dN.Parent
subset(GY94, sfp == "sfp")
dN.Parent
ggplot(subset(GY94, sfp == "sfp"),
aes(x = abs(PmPs.lfc), y = dN)) +
geom_point(alpha = 0.8) +
theme_minimal() +
xlab("log fold-change parental divergence") +
ylim(c(0,1)) +
annotate(geom = "text", y = 0.75, x = 6,
label = expression(rho==-0.016),
size = 4, hjust = 0)
### subset corrs to Sfp and AG-biased
dN.Parent <- ggplot(subset(GY94, sfp == "sfp"),
aes(x = abs(PmPs.lfc), y = dN)) +
geom_point(alpha = 0.8) +
theme_minimal() +
xlab("log fold-change parental divergence") +
ylim(c(0,1)) #+
dN.Parent
### subset corrs to Sfp and AG-biased
dN.Parent <- ggplot(subset(GY94, sfp == "sfp"),
aes(x = abs(PmPs.lfc), y = dN)) +
geom_point(alpha = 0.8) +
theme_minimal() +
#xlab("log fold-change parental divergence") +
#ylim(c(0,1)) #+
#annotate(geom = "text", y = 0.75, x = 6,
#label = expression(rho==-0.016),
#size = 4, hjust = 0)
# w and dN by gene classes
aggregate(w ~ DE_sm, subset(GY94, sfp == "non-sfp"), median)
### subset corrs to Sfp and AG-biased
dN.Parent <- ggplot(subset(GY94, sfp == "sfp"),
aes(x = abs(PmPs.lfc), y = dN)) +
geom_point(alpha = 0.8) +
theme_minimal() #+
dN.Parent
### subset corrs to Sfp and AG-biased
dN.Parent <- ggplot(subset(GY94, sfp == "sfp"),
aes(x = abs(PmPs.lfc), y = dN)) +
geom_point(alpha = 0.8) +
theme_minimal() #+
dN.Parent
### subset corrs to Sfp and AG-biased
dN.Parent <- ggplot(subset(GY94, sfp == "sfp"),
aes(x = abs(PmPs.lfc), y = w)) +
geom_point(alpha = 0.8) +
theme_minimal() #+
dN.Parent
cor(GY94$dN, abs(GY94$PmPs.lfc), method = "spearman")
cor(GY94$dN, abs(GY94$F1mF1s.lfc), method = "spearman")
cor(GY94$w, abs(GY94$PmPs.lfc), method = "spearman")
cor(GY94$w, abs(GY94$F1mF1s.lfc), method = "spearman")
subset(GY94, AG_biased_0.8 == "AG-biased")
subset(GY94, AG_biased == "AG-biased")
GY94_AGB <- subset(GY94, AG_biased == "AG-biased")
cor(GY94_sfp$dN, abs(GY94_sfp$PmPs.lfc), method = "spearman")
GY94_sfp <- subset(GY94, sfp == "sfp")
cor(GY94_sfp$dN, abs(GY94_sfp$PmPs.lfc), method = "spearman")
cor(GY94_sfp$dN, abs(GY94_sfp$F1mF1s.lfc), method = "spearman")
cor(GY94_sfp$w,  abs(GY94_sfp$PmPs.lfc), method = "spearman")
cor(GY94_sfp$w,  abs(GY94_sfp$F1mF1s.lfc), method = "spearman")
exp(0.5)
w.bias.vln
a.bias.vln <- ggplot(subset(mk, alphaMK > -5), aes(x = alphaMK, y = AG_biased_0.8)) +
geom_violin(alpha = 0.8, fill = "cornflowerblue") +
geom_boxplot(width = 0.2, outlier.shape = NA,  fill = "cornflowerblue") +
theme_minimal() +
theme(legend.position="none") +
scale_y_discrete(limits=rev) +
labs(x = expression(alpha), y = "") +
geom_text(aes(label = paste0("median: ", median_a), y = bias, x = 0), data = M.alpha.bias.df,
nudge_x = -4.5, nudge_y = 0.4, hjust = 0, size = 4)
a.bias.vln
geneclass_alpha_plots
ggsave("~/Documents/Begun/hybrid/figs/geneclass_alpha_plots.pdf", geneclass_alpha_plots,
device = cairo_pdf, width = 6, height = 4, units = "in")
alpha_supp <- plot_grid(a.class.vln, a.dom.vln,
a.sfp.vln,  a.bias.vln,
labels = c("A", "",
"B", "C"),
rel_heights = c(1, 0.5),
nrow = 2)
ggsave("~/Documents/Begun/hybrid/figs/alpha_supp.pdf", alpha_supp,
device = cairo_pdf, width = 11, height = 5.33333, units = "in")
dom_GO_plot
dom_GO_summary
# summary table
dom_GO_summary$underdominant$Description
# summary table
dom_GO_summary$underdominant$Description[3]
# summary table
dom_GO_summary$underdominant$Description[3] <- "ER to Golgi vesicle transport"
dom_GO_summary$underdominant$Description[3]
dom_GO_df <- purrr::map_df(dom_GO_summary, I, .id = 'dominance')
dom_GO_df %<>% rownames_to_column("GO_term")
# dot plots
dom_GO_plotlist <- lapply(dom_GO_summary[unique(dom_GO_df$dominance)],
function(class) {
ggplot(class, aes(x = enrichment,
y = reorder(Description, enrichment),
size = Count,
color = p.adjust)) +
geom_point() +
theme_minimal(base_size = 8) +
ylab("") +
theme(plot.margin = unit(c(0.75,0.25,0.25,0.25), "cm"),
legend.box = "horizontal") +
scale_color_gradient(low = "slategray2", high = "darkslateblue") +
scale_size(range = c(1,4)) +
guides(size = guide_legend(order = 2),
color = guide_colorbar(order = 1)) +
scale_y_discrete(labels = function(y) str_wrap(y, width = 15)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 3))
}
)
dom_GO_plot <- plot_grid(plotlist = dom_GO_plotlist,
labels = names(dom_GO_plotlist),
label_size =10,
nrow = 1)
dom_GO_plot
ggsave("~/Documents/Begun/hybrid/figs/GO_dominance.pdf", dom_GO_plot,
device = cairo_pdf, width = 15, height = 2.7, units = "in")
dN_expression_supp <- plot_grid(dN.parent, dN.ASE
labels = c("A" "B"),
nrow = 1)
dN_expression_supp
dN_expression_supp <- plot_grid(dN.parent, dN.ASE,
labels = c("A" "B"),
nrow = 1)
dN_expression_supp <- plot_grid(dN.parent, dN.ASE,
labels = c("A" "B"),
nrow = 1)
dN_expression_supp <- plot_grid(dN.parent, dN.ASE,
labels = c("A", "B"),
nrow = 1)
dN_expression_supp <- plot_grid(dN.Parent, dN.ASE,
labels = c("A", "B"),
nrow = 1)
dN_expression_supp
dN.Parent
dN.Parent <- ggplot(GY94,
aes(x = abs(PmPs.lfc), y = dN)) +
geom_hex(bins = 120) +
scale_fill_continuous(type = "viridis") +
theme_minimal() +
xlab("log fold-change parental divergence") +
ylim(c(0,1)) +
annotate(geom = "text", y = 0.75, x = 6,
label = expression(rho==-0.016),
size = 4, hjust = 0)
dN.Parent
dN_expression_supp <- plot_grid(dN.Parent, dN.ASE,
labels = c("A", "B"),
nrow = 1)
ggsave("~/Documents/Begun/hybrid/figs/dN_expression_supp.pdf", dN_expression_supp,
device = cairo_pdf, width = 7.5, height = 3.25, units = "in")
dN_supp <- plot_grid(dN.Parent, dN.ASE,
dN.sfp.vln, dN.bias.vln,
labels = c("A",
"B",
"C",
"D"),
nrow = 2)
dN_supp
ggsave("~/Documents/Begun/hybrid/figs/dN_supp.pdf", dN_w_supp,
device = cairo_pdf, width = 8, height = 8, units = "in")
ggsave("~/Documents/Begun/hybrid/figs/dN_supp.pdf", dN_supp,
device = cairo_pdf, width = 8, height = 8, units = "in")
ggsave("~/Documents/Begun/hybrid/figs/dN_supp.pdf", dN_supp,
device = cairo_pdf, width = 8, height = 6, units = "in")
